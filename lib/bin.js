// Generated by CoffeeScript 1.7.1
(function() {
  var minimist, normalizePath, path, printUsage, run, userefFile;

  path = require('path');

  minimist = require('minimist');

  userefFile = require('./index');

  run = function() {
    var argv, inputFile, opt, options, outputFile, userefOpts, _ref, _ref1;
    argv = minimist(process.argv.slice(2));
    inputFile = argv['_'][0];
    outputFile = argv['_'][1];
    options = argv;
    if (!inputFile || !outputFile) {
      return printUsage();
    }
    for (opt in options) {
      if (opt !== 'js' && opt !== 'css' && opt !== '_') {
        console.log("Unrecognized option: " + opt);
        return;
      }
    }
    if ((options.js != null) && ((_ref = options.js) !== 'concat' && _ref !== 'uglify')) {
      console.log("Unrecognized JS handler: " + options.js);
      return;
    }
    if ((options.css != null) && ((_ref1 = options.css) !== 'concat' && _ref1 !== 'uglify')) {
      console.log("Unrecognized CSS handler: " + options.css);
      return;
    }
    userefOpts = {
      handlers: {
        js: options.js,
        css: options.css
      }
    };
    return userefFile(inputFile, outputFile, userefOpts, function(err, success) {
      var item, items, type, _results;
      if (err) {
        return console.error(err);
      }
      console.log("Wrote:");
      console.log('  - ' + normalizePath(outputFile));
      _results = [];
      for (type in success) {
        items = success[type];
        _results.push((function() {
          var _i, _len, _results1;
          _results1 = [];
          for (_i = 0, _len = items.length; _i < _len; _i++) {
            item = items[_i];
            if (item.outputFile) {
              _results1.push(console.log('  - ' + normalizePath(item.outputFile)));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    });
  };

  printUsage = function() {
    console.log("Usage:");
    console.log("");
    console.log("useref inputFile outputFile --js <uglify|concat> --css <uglify|concat>");
    console.log("");
    return console.log("The `inputFile` and `outputFile` arguments are required");
  };

  normalizePath = function(f) {
    return f.split(path.sep).join('/');
  };

  module.exports = {
    run: run
  };

}).call(this);
