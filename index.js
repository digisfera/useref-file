// Generated by CoffeeScript 1.7.1
(function() {
  var async, concatFun, fs, mkdirp, path, uglifyFun, useref, _;

  path = require('path');

  useref = require('useref');

  async = require('async');

  fs = require('fs');

  mkdirp = require('mkdirp');

  _ = require('lodash');

  concatFun = require('concatenate-files');

  uglifyFun = require('uglify-files');

  module.exports = function(inputFile, outputDir, options, doneCallback) {
    var _base, _base1;
    if (!doneCallback && _.isFunction(options)) {
      doneCallback = options;
      options = null;
    }
    if (options == null) {
      options = {};
    }
    if (options.handlers == null) {
      options.handlers = {};
    }
    if ((_base = options.handlers).js == null) {
      _base.js = 'concat';
    }
    if ((_base1 = options.handlers).css == null) {
      _base1.css = 'concat';
    }
    options.handlers.js = _.isFunction(options.handlers.js) ? options.handlers.js : options.handlers.js === 'concat' ? function(srcFiles, dstFile, cb) {
      return concatFun(srcFiles, dstFile, {
        separator: ';'
      }, cb);
    } : options.handlers.js === 'uglify' ? function(srcFiles, dstFile, cb) {
      return uglifyFun(srcFiles, dstFile, {}, cb);
    } : null;
    options.handlers.css = _.isFunction(options.handlers.css) ? options.handlers.css : options.handlers.css === 'concat' ? function(srcFiles, dstFile, cb) {
      return concatFun(srcFiles, dstFile, {
        separator: ''
      }, cb);
    } : null;
    return fs.readFile(inputFile, {
      encoding: 'utf-8'
    }, function(err, inputData) {
      var outHtml, processFun, toBuild, writeFun, _ref;
      if (err) {
        return doneCallback(err);
      }
      _ref = useref(inputData), outHtml = _ref[0], toBuild = _ref[1];
      writeFun = function(cb) {
        return mkdirp(outputDir, function(err, done) {
          if (err) {
            return cb(err);
          }
          return fs.writeFile(path.join(outputDir, path.basename(inputFile)), outHtml, cb);
        });
      };
      processFun = function(cb) {
        var allFuns;
        allFuns = [];
        _.each(toBuild, function(block, type) {
          return _.each(block, function(src, dst) {
            var dstFile, srcFiles;
            srcFiles = _.map(src, function(p) {
              return path.join(path.dirname(inputFile), p);
            });
            dstFile = path.join(outputDir, dst);
            return allFuns.push(function(handlerCallback) {
              return options.handlers[type](srcFiles, dstFile, function(err, result) {
                if (err) {
                  return handlerCallback(err);
                } else {
                  return handlerCallback(null, {
                    type: type,
                    result: result
                  });
                }
              });
            });
          });
        });
        return async.parallel(allFuns, cb);
      };
      return async.parallel([writeFun, processFun], function(err, result) {
        var blockResults, resultsPerType;
        if (err) {
          return doneCallback(err);
        }
        resultsPerType = _.groupBy(result != null ? result[1] : void 0, 'type');
        blockResults = _.mapValues(resultsPerType, function(typeResults) {
          return _.map(typeResults, 'result');
        });
        return doneCallback(err, blockResults);
      });
    });
  };

}).call(this);
